{"version":3,"sources":["serviceWorker.js","index.js","components/testUseEffect.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","number","setNumber","users","setUsers","useEffect","fetch","then","response","json","jsonData","results","onSubmit","e","preventDefault","type","name","onBlur","target","value","className","map","user","key","cell","first","last","src","picture","thumbnail","alt","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCXNC,IAASC,OAAO,mBCLD,WAAuB,IAAD,EACPC,mBAAS,GADF,mBAC5BC,EAD4B,KACpBC,EADoB,OAETF,mBAAS,IAFA,mBAE5BG,EAF4B,KAErBC,EAFqB,KAenC,OARAC,qBAAU,WACRC,MAAM,sCAAD,OAAuCL,IACzCM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJN,EAAS,YAAIM,EAASC,eAEzB,CAACV,IAGF,6BACE,0BACEW,SAAU,SAAAC,GACRA,EAAEC,mBAFN,SAME,2BAAOC,KAAK,OAAOC,KAAK,SAASC,OApBjB,SAAAJ,GACpBX,EAAUW,EAAEK,OAAOC,UAoBf,2BAAOJ,KAAK,SAASI,MAAM,kBAE5BhB,GACC,2BAAOiB,UAAU,cACf,+BACE,4BACE,sCACA,yCACA,wCACA,yCAGJ,+BACGjB,EAAMkB,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,MACZ,4BAAKF,EAAKE,MACV,4BAAKF,EAAKN,KAAKS,OACf,4BAAKH,EAAKN,KAAKU,MACf,4BACE,yBACEC,IAAKL,EAAKM,QAAQC,UAClBC,IAAKR,EAAKN,KAAKS,MACfL,UAAU,sBDzCd,MAAaW,SAASC,eAAe,SD0H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.ec552148.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport Example from \"./components/testUseEffect\";\n\nReactDOM.render(<Example />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\n\nexport default function Randomuser() {\n  const [number, setNumber] = useState(0);\n  const [users, setUsers] = useState([]);\n  const changeHandler = e => {\n    setNumber(e.target.value);\n  };\n\n  useEffect(() => {\n    fetch(`https://randomuser.me/api/?results=${number}`)\n      .then(response => response.json())\n      .then(jsonData => {\n        setUsers([...jsonData.results]);\n      });\n  }, [number]);\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n        }}\n      >\n        Number\n        <input type=\"text\" name=\"number\" onBlur={changeHandler} />\n        <input type=\"submit\" value=\"Send Request\" />\n      </form>\n      {users && (\n        <table className=\"table mt-5\">\n          <thead>\n            <tr>\n              <th>Cell #</th>\n              <th>Firstname</th>\n              <th>Lastname</th>\n              <th>Picture</th>\n            </tr>\n          </thead>\n          <tbody>\n            {users.map(user => (\n              <tr key={user.cell}>\n                <td>{user.cell}</td>\n                <td>{user.name.first}</td>\n                <td>{user.name.last}</td>\n                <td>\n                  <img\n                    src={user.picture.thumbnail}\n                    alt={user.name.first}\n                    className=\"rounded\"\n                  />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n"],"sourceRoot":""}